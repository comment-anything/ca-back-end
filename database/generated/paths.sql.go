// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: paths.sql

package generated

import (
	"context"
	"database/sql"
)

const createPath = `-- name: CreatePath :one
INSERT INTO "Paths"
( "domain", "path" )
VALUES
( $1 , $2)
RETURNING id, domain, path
`

type CreatePathParams struct {
	Domain sql.NullString `json:"domain"`
	Path   sql.NullString `json:"path"`
}

func (q *Queries) CreatePath(ctx context.Context, arg CreatePathParams) (Path, error) {
	row := q.db.QueryRowContext(ctx, createPath, arg.Domain, arg.Path)
	var i Path
	err := row.Scan(&i.ID, &i.Domain, &i.Path)
	return i, err
}

const getPath = `-- name: GetPath :one
SELECT id, domain, path FROM "Paths"
WHERE domain = $1 AND path = $2 LIMIT 1
`

type GetPathParams struct {
	Domain sql.NullString `json:"domain"`
	Path   sql.NullString `json:"path"`
}

func (q *Queries) GetPath(ctx context.Context, arg GetPathParams) (Path, error) {
	row := q.db.QueryRowContext(ctx, getPath, arg.Domain, arg.Path)
	var i Path
	err := row.Scan(&i.ID, &i.Domain, &i.Path)
	return i, err
}

const getPathById = `-- name: GetPathById :one
SELECT id, domain, path FROM "Paths"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPathById(ctx context.Context, id int64) (Path, error) {
	row := q.db.QueryRowContext(ctx, getPathById, id)
	var i Path
	err := row.Scan(&i.ID, &i.Domain, &i.Path)
	return i, err
}
