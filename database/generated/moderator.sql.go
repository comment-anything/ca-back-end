// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: moderator.sql

package generated

import (
	"context"
)

const getDomainModeratorAssignments = `-- name: GetDomainModeratorAssignments :many
select distinct on (domain) domain, is_deactivation, id
 from "DomainModeratorAssignments"
 WHERE assigned_to=$1
 order by domain, assigned_at DESC, id
`

type GetDomainModeratorAssignmentsRow struct {
	Domain         string `json:"domain"`
	IsDeactivation bool   `json:"is_deactivation"`
	ID             int64  `json:"id"`
}

func (q *Queries) GetDomainModeratorAssignments(ctx context.Context, assignedTo int64) ([]GetDomainModeratorAssignmentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDomainModeratorAssignments, assignedTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDomainModeratorAssignmentsRow
	for rows.Next() {
		var i GetDomainModeratorAssignmentsRow
		if err := rows.Scan(&i.Domain, &i.IsDeactivation, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalModeratorAssignments = `-- name: GetGlobalModeratorAssignments :many
SELECT id, assigned_to, assigned_at, assigned_by, is_deactivation from "GlobalModeratorAssignments" where assigned_to = $1 ORDER BY assigned_at DESC
`

func (q *Queries) GetGlobalModeratorAssignments(ctx context.Context, assignedTo int64) ([]GlobalModeratorAssignment, error) {
	rows, err := q.db.QueryContext(ctx, getGlobalModeratorAssignments, assignedTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalModeratorAssignment
	for rows.Next() {
		var i GlobalModeratorAssignment
		if err := rows.Scan(
			&i.ID,
			&i.AssignedTo,
			&i.AssignedAt,
			&i.AssignedBy,
			&i.IsDeactivation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
