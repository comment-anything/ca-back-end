// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: moderate.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createModActionRecord = `-- name: CreateModActionRecord :exec
INSERT INTO "CommentModerationActions" (
    taken_by,
    comment_id,
    reason,
    set_hidden_to,
    set_removed_to,
    associated_report
) VALUES (
    $1,$2,$3,$4,$5,$6
)
`

type CreateModActionRecordParams struct {
	TakenBy          int64          `json:"taken_by"`
	CommentID        int64          `json:"comment_id"`
	Reason           sql.NullString `json:"reason"`
	SetHiddenTo      sql.NullBool   `json:"set_hidden_to"`
	SetRemovedTo     sql.NullBool   `json:"set_removed_to"`
	AssociatedReport sql.NullInt64  `json:"associated_report"`
}

func (q *Queries) CreateModActionRecord(ctx context.Context, arg CreateModActionRecordParams) error {
	_, err := q.db.ExecContext(ctx, createModActionRecord,
		arg.TakenBy,
		arg.CommentID,
		arg.Reason,
		arg.SetHiddenTo,
		arg.SetRemovedTo,
		arg.AssociatedReport,
	)
	return err
}

const getModerationRecords = `-- name: GetModerationRecords :many
SELECT id, taken_by, comment_id, reason, taken_on, set_hidden_to, set_removed_to, associated_report FROM "CommentModerationActions"
WHERE taken_on > $1 AND taken_on < $2
`

type GetModerationRecordsParams struct {
	TakenOn   time.Time `json:"taken_on"`
	TakenOn_2 time.Time `json:"taken_on_2"`
}

func (q *Queries) GetModerationRecords(ctx context.Context, arg GetModerationRecordsParams) ([]CommentModerationAction, error) {
	rows, err := q.db.QueryContext(ctx, getModerationRecords, arg.TakenOn, arg.TakenOn_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommentModerationAction
	for rows.Next() {
		var i CommentModerationAction
		if err := rows.Scan(
			&i.ID,
			&i.TakenBy,
			&i.CommentID,
			&i.Reason,
			&i.TakenOn,
			&i.SetHiddenTo,
			&i.SetRemovedTo,
			&i.AssociatedReport,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moderateComment = `-- name: ModerateComment :exec
UPDATE "Comments"
SET "hidden" = $2, "removed" = $3
WHERE "id" = $1
`

type ModerateCommentParams struct {
	ID      int64        `json:"id"`
	Hidden  sql.NullBool `json:"hidden"`
	Removed sql.NullBool `json:"removed"`
}

func (q *Queries) ModerateComment(ctx context.Context, arg ModerateCommentParams) error {
	_, err := q.db.ExecContext(ctx, moderateComment, arg.ID, arg.Hidden, arg.Removed)
	return err
}
