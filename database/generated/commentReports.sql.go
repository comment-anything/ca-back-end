// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: commentReports.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getAllCommentReports = `-- name: GetAllCommentReports :many
select "CR".id, "P".domain, "CR".reporting_user, "CR".comment, "CR".reason, "CR".action_taken, "CR".time_created
from "CommentReports" as "CR"
inner join
(select id, path_id from "Comments") as "C"
on "CR".comment = "C".id
inner join
(select id, domain from "Paths") as "P"
on "C".path_id = "P".id
`

type GetAllCommentReportsRow struct {
	ID            int64          `json:"id"`
	Domain        sql.NullString `json:"domain"`
	ReportingUser int64          `json:"reporting_user"`
	Comment       int64          `json:"comment"`
	Reason        sql.NullString `json:"reason"`
	ActionTaken   bool           `json:"action_taken"`
	TimeCreated   time.Time      `json:"time_created"`
}

func (q *Queries) GetAllCommentReports(ctx context.Context) ([]GetAllCommentReportsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCommentReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCommentReportsRow
	for rows.Next() {
		var i GetAllCommentReportsRow
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.ReportingUser,
			&i.Comment,
			&i.Reason,
			&i.ActionTaken,
			&i.TimeCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentReportsForDomain = `-- name: GetCommentReportsForDomain :many
select "CR".id, "P".domain, "CR".reporting_user, "CR".comment, "CR".reason, "CR".action_taken, "CR".time_created
from "CommentReports" as "CR"
inner join
(select id, path_id from "Comments") as "C"
on "CR".comment = "C".id
inner join
(select id, domain from "Paths" where domain = $1) as "P"
on "C".path_id = "P".id
`

type GetCommentReportsForDomainRow struct {
	ID            int64          `json:"id"`
	Domain        sql.NullString `json:"domain"`
	ReportingUser int64          `json:"reporting_user"`
	Comment       int64          `json:"comment"`
	Reason        sql.NullString `json:"reason"`
	ActionTaken   bool           `json:"action_taken"`
	TimeCreated   time.Time      `json:"time_created"`
}

func (q *Queries) GetCommentReportsForDomain(ctx context.Context, domain sql.NullString) ([]GetCommentReportsForDomainRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentReportsForDomain, domain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentReportsForDomainRow
	for rows.Next() {
		var i GetCommentReportsForDomainRow
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.ReportingUser,
			&i.Comment,
			&i.Reason,
			&i.ActionTaken,
			&i.TimeCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
