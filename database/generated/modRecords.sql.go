// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: modRecords.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getModActionsInRange = `-- name: GetModActionsInRange :many
SELECT 
"MA".id, "MA".taken_by, "MA".comment_id, "MA".reason as "ActionReason", "MA".taken_on, 
"MA".set_hidden_to, "MA".set_removed_to, 

"MA".associated_report,
"CR".reporting_user,
"CR".reason as "ReportReason",
"CR".time_created "ReportCreated"
FROM 
(SELECT id, taken_by, comment_id, reason, taken_on, set_hidden_to, set_removed_to, associated_report FROM "CommentModerationActions" 
WHERE taken_on > $1 AND taken_on <$2)
as "MA"
LEFT JOIN
"CommentReports" as "CR"
ON
"MA".associated_report = "CR".id
`

type GetModActionsInRangeParams struct {
	TakenOn   time.Time `json:"taken_on"`
	TakenOn_2 time.Time `json:"taken_on_2"`
}

type GetModActionsInRangeRow struct {
	ID               int64          `json:"id"`
	TakenBy          int64          `json:"taken_by"`
	CommentID        int64          `json:"comment_id"`
	ActionReason     sql.NullString `json:"ActionReason"`
	TakenOn          time.Time      `json:"taken_on"`
	SetHiddenTo      sql.NullBool   `json:"set_hidden_to"`
	SetRemovedTo     sql.NullBool   `json:"set_removed_to"`
	AssociatedReport sql.NullInt64  `json:"associated_report"`
	ReportingUser    sql.NullInt64  `json:"reporting_user"`
	ReportReason     sql.NullString `json:"ReportReason"`
	ReportCreated    sql.NullTime   `json:"ReportCreated"`
}

func (q *Queries) GetModActionsInRange(ctx context.Context, arg GetModActionsInRangeParams) ([]GetModActionsInRangeRow, error) {
	rows, err := q.db.QueryContext(ctx, getModActionsInRange, arg.TakenOn, arg.TakenOn_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetModActionsInRangeRow
	for rows.Next() {
		var i GetModActionsInRangeRow
		if err := rows.Scan(
			&i.ID,
			&i.TakenBy,
			&i.CommentID,
			&i.ActionReason,
			&i.TakenOn,
			&i.SetHiddenTo,
			&i.SetRemovedTo,
			&i.AssociatedReport,
			&i.ReportingUser,
			&i.ReportReason,
			&i.ReportCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
