// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: account_changes.sql

package generated

import (
	"context"
	"database/sql"
)

const createPWResetCode = `-- name: CreatePWResetCode :one
INSERT INTO "PasswordResetCodes" (
    user_id, id
) VALUES (
    $1, $2
) RETURNING id, user_id, created_on
`

type CreatePWResetCodeParams struct {
	UserID int64 `json:"user_id"`
	ID     int64 `json:"id"`
}

func (q *Queries) CreatePWResetCode(ctx context.Context, arg CreatePWResetCodeParams) (PasswordResetCode, error) {
	row := q.db.QueryRowContext(ctx, createPWResetCode, arg.UserID, arg.ID)
	var i PasswordResetCode
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedOn)
	return i, err
}

const deletePreviousPWRestCodesForUser = `-- name: DeletePreviousPWRestCodesForUser :exec
DELETE FROM "PasswordResetCodes"
WHERE user_id = $1
`

func (q *Queries) DeletePreviousPWRestCodesForUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deletePreviousPWRestCodesForUser, userID)
	return err
}

const getPWResetCodeEntry = `-- name: GetPWResetCodeEntry :one
SELECT id, user_id, created_on FROM "PasswordResetCodes"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetPWResetCodeEntry(ctx context.Context, id int64) (PasswordResetCode, error) {
	row := q.db.QueryRowContext(ctx, getPWResetCodeEntry, id)
	var i PasswordResetCode
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedOn)
	return i, err
}

const setNewUserPassword = `-- name: SetNewUserPassword :exec
UPDATE "Users"
SET password = $1
WHERE email = $2
`

type SetNewUserPasswordParams struct {
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) SetNewUserPassword(ctx context.Context, arg SetNewUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, setNewUserPassword, arg.Password, arg.Email)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE "Users"
SET email = $2
WHERE id = $1
`

type UpdateUserEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.ID, arg.Email)
	return err
}

const updateUserProfileBlurb = `-- name: UpdateUserProfileBlurb :exec
UPDATE "Users"
SET profile_blurb = $2
WHERE id = $1
`

type UpdateUserProfileBlurbParams struct {
	ID           int64          `json:"id"`
	ProfileBlurb sql.NullString `json:"profile_blurb"`
}

func (q *Queries) UpdateUserProfileBlurb(ctx context.Context, arg UpdateUserProfileBlurbParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfileBlurb, arg.ID, arg.ProfileBlurb)
	return err
}
